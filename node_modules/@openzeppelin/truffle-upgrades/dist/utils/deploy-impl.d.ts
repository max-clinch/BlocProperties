import { ValidationOptions, EthereumProvider, StorageLayout, ValidationRunData, Version } from '@openzeppelin/upgrades-core';
import { StandaloneOptions, UpgradeOptions } from './options';
import { ContractClass } from './truffle';
interface DeployedImpl {
    impl: string;
    kind: NonNullable<ValidationOptions['kind']>;
}
interface DeployedBeaconImpl {
    impl: string;
}
export interface DeployData {
    fullOpts: Required<UpgradeOptions>;
    validations: ValidationRunData;
    version: Version;
    provider: EthereumProvider;
    layout: StorageLayout;
}
export declare function getDeployData(opts: UpgradeOptions, Contract: ContractClass): Promise<DeployData>;
export declare function deployStandaloneImpl(Contract: ContractClass, opts: StandaloneOptions): Promise<DeployedImpl>;
export declare function deployProxyImpl(Contract: ContractClass, opts: UpgradeOptions, proxyAddress?: string): Promise<DeployedImpl>;
export declare function deployBeaconImpl(Contract: ContractClass, opts: UpgradeOptions, beaconAddress?: string): Promise<DeployedBeaconImpl>;
export {};
//# sourceMappingURL=deploy-impl.d.ts.map