"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployBeaconImpl = exports.deployProxyImpl = exports.deployStandaloneImpl = exports.getDeployData = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const deploy_1 = require("./deploy");
const options_1 = require("./options");
const truffle_1 = require("./truffle");
const validate_impl_1 = require("./validate-impl");
const validations_1 = require("./validations");
const wrap_provider_1 = require("./wrap-provider");
async function getDeployData(opts, Contract) {
    const fullOpts = (0, options_1.withDefaults)(opts);
    const provider = (0, wrap_provider_1.wrapProvider)(fullOpts.deployer.provider);
    const { contracts_build_directory, contracts_directory } = (0, truffle_1.getTruffleConfig)();
    const validations = await (0, validations_1.validateArtifacts)(contracts_build_directory, contracts_directory);
    const linkedBytecode = await (0, validations_1.getLinkedBytecode)(Contract, provider);
    const encodedArgs = encodeArgs(Contract, fullOpts.constructorArgs);
    const version = (0, upgrades_core_1.getVersion)(Contract.bytecode, linkedBytecode, encodedArgs);
    const layout = (0, upgrades_core_1.getStorageLayout)([validations], version);
    return { fullOpts, validations, version, provider, layout };
}
exports.getDeployData = getDeployData;
async function deployStandaloneImpl(Contract, opts) {
    const deployData = await getDeployData(opts, Contract);
    await (0, validate_impl_1.validateImpl)(deployData, opts);
    return await deployImpl(deployData, Contract, opts);
}
exports.deployStandaloneImpl = deployStandaloneImpl;
async function deployProxyImpl(Contract, opts, proxyAddress) {
    const deployData = await getDeployData(opts, Contract);
    await (0, validate_impl_1.validateProxyImpl)(deployData, opts, proxyAddress);
    return deployImpl(deployData, Contract, opts);
}
exports.deployProxyImpl = deployProxyImpl;
async function deployBeaconImpl(Contract, opts, beaconAddress) {
    const deployData = await getDeployData(opts, Contract);
    await (0, validate_impl_1.validateBeaconImpl)(deployData, opts, beaconAddress);
    return await deployImpl(deployData, Contract, opts);
}
exports.deployBeaconImpl = deployBeaconImpl;
function encodeArgs(Contract, constructorArgs) {
    const fragment = Contract.abi.find((entry) => entry.type == 'constructor');
    return Contract.web3.eth.abi.encodeParameters(fragment?.inputs?.map((entry) => entry.type) ?? [], constructorArgs);
}
async function deployImpl(deployData, Contract, opts) {
    const layout = deployData.layout;
    const impl = await (0, upgrades_core_1.fetchOrDeploy)(deployData.version, deployData.provider, async () => {
        const abi = Contract.abi;
        const attemptDeploy = () => {
            if (opts.useDeployedImplementation) {
                throw new upgrades_core_1.UpgradesError('The implementation contract was not previously deployed.', () => 'The useDeployedImplementation option was set to true but the implementation contract was not previously deployed on this network.');
            }
            else {
                return (0, deploy_1.deploy)(deployData.fullOpts.deployer, Contract, ...deployData.fullOpts.constructorArgs);
            }
        };
        const deployment = Object.assign({ abi }, await attemptDeploy());
        return { ...deployment, layout };
    });
    return { impl, kind: opts.kind };
}
//# sourceMappingURL=deploy-impl.js.map