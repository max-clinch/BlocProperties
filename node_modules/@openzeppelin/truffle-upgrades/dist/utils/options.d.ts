import { Deployer, TruffleTxOptions } from './truffle';
import { DeployOpts, ProxyKindOption, StandaloneValidationOptions, ValidationOptions } from '@openzeppelin/upgrades-core';
type TruffleDeployer = {
    deployer?: Deployer;
    /**
     * Overrides for the transaction sent to deploy a contract.
     */
    txOverrides?: TruffleTxOptions;
};
export type StandaloneOptions = StandaloneValidationOptions & DeployOpts & TruffleDeployer & {
    constructorArgs?: unknown[];
    /**
     * @deprecated Use `redeployImplementation = 'never'` instead.
     */
    useDeployedImplementation?: boolean;
    redeployImplementation?: 'always' | 'never' | 'onchange';
};
export type UpgradeOptions = ValidationOptions & StandaloneOptions;
export declare function withDefaults(opts?: UpgradeOptions): Required<UpgradeOptions>;
type Initializer = {
    initializer?: string | false;
};
export type DeployBeaconProxyOptions = ProxyKindOption & Initializer & TruffleDeployer;
export type DeployBeaconOptions = StandaloneOptions;
export type DeployImplementationOptions = StandaloneOptions;
export type DeployProxyAdminOptions = DeployOpts & TruffleDeployer;
export type DeployProxyOptions = StandaloneOptions & Initializer;
export type ForceImportOptions = ProxyKindOption;
export type PrepareUpgradeOptions = UpgradeOptions;
export type UpgradeBeaconOptions = UpgradeOptions;
export type UpgradeProxyOptions = UpgradeOptions & {
    call?: {
        fn: string;
        args?: unknown[];
    } | string;
};
export type ValidateImplementationOptions = StandaloneValidationOptions;
export type ValidateUpgradeOptions = ValidationOptions;
export {};
//# sourceMappingURL=options.d.ts.map