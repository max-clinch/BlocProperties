"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.forceImport = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const utils_1 = require("./utils");
const simulate_deploy_1 = require("./utils/simulate-deploy");
async function forceImport(addressOrInstance, Contract, opts = {}) {
    const { deployer } = (0, utils_1.withDefaults)(opts);
    const provider = (0, utils_1.wrapProvider)(deployer.provider);
    const manifest = await upgrades_core_1.Manifest.forNetwork(provider);
    const address = (0, utils_1.getContractAddress)(addressOrInstance);
    const implAddress = await (0, upgrades_core_1.getImplementationAddressFromProxy)(provider, address);
    if (implAddress !== undefined) {
        await importProxyToManifest(provider, address, implAddress, Contract, opts, manifest);
        return Contract.at(address);
    }
    else if (await (0, upgrades_core_1.isBeacon)(provider, address)) {
        const beaconImplAddress = await (0, upgrades_core_1.getImplementationAddressFromBeacon)(provider, address);
        await addImplToManifest(beaconImplAddress, Contract, opts);
        const UpgradeableBeaconFactory = await (0, utils_1.getUpgradeableBeaconFactory)(Contract);
        return UpgradeableBeaconFactory.at(address);
    }
    else {
        if (!(await (0, upgrades_core_1.hasCode)(provider, address))) {
            throw new upgrades_core_1.NoContractImportError(address);
        }
        await addImplToManifest(address, Contract, opts);
        return Contract.at(address);
    }
}
exports.forceImport = forceImport;
async function importProxyToManifest(provider, proxyAddress, implAddress, Contract, opts, manifest) {
    await addImplToManifest(implAddress, Contract, opts);
    let importKind;
    if (opts.kind === undefined) {
        if (await (0, upgrades_core_1.isBeaconProxy)(provider, proxyAddress)) {
            importKind = 'beacon';
        }
        else {
            const deployData = await (0, utils_1.getDeployData)(opts, Contract);
            importKind = (0, upgrades_core_1.inferProxyKind)(deployData.validations, deployData.version);
        }
    }
    else {
        importKind = opts.kind;
    }
    if (importKind === 'transparent') {
        await addAdminToManifest(provider, proxyAddress, Contract, opts);
    }
    await (0, upgrades_core_1.addProxyToManifest)(importKind, proxyAddress, manifest);
}
async function addImplToManifest(implAddress, Contract, opts) {
    await (0, simulate_deploy_1.simulateDeployImpl)(Contract, opts, implAddress);
}
async function addAdminToManifest(provider, proxyAddress, Contract, opts) {
    const adminAddress = await (0, upgrades_core_1.getAdminAddress)(provider, proxyAddress);
    await (0, simulate_deploy_1.simulateDeployAdmin)(Contract, opts, adminAddress);
}
//# sourceMappingURL=force-import.js.map